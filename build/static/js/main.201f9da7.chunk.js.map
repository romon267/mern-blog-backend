{"version":3,"sources":["reducers/notificationReducer.js","services/posts.js","reducers/userReducer.js","services/users.js","reducers/usersReducer.js","reducers/postsReducer.js","reducers/mobileReducer.js","components/Navbar.jsx","components/PostDetails.jsx","components/PostPreview.jsx","components/Post.jsx","components/StyleButton.jsx","components/PostForm.jsx","components/SortButton.jsx","components/Content.jsx","components/UserList.jsx","services/login.js","components/LoginForm.jsx","components/RegisterForm.jsx","components/Notification.jsx","components/UserDetail.jsx","reducers/singlePostReducer.js","components/PostView.jsx","App.jsx","store.js","index.jsx"],"names":["timeOutId","baseUrl","token","getAll","a","axios","get","response","data","getBestPosts","getByUsername","username","getByUrl","url","create","newPost","config","headers","Authorization","post","console","log","author","updateOne","id","put","setToken","newToken","deleteOne","delete","logoutUser","window","localStorage","removeItem","postService","type","userReducer","state","action","user","usersReducer","flashNotification","message","time","dispatch","clearTimeout","setTimeout","notificationReducer","sortPosts","method","likePost","likes","savedPost","deletePost","postsReducer","filter","sortedPosts","sort","b","Date","createdAt","newState","map","p","mobileReducer","navLink","navLinkMobile","MenuMobileButton","useDispatch","opened","useSelector","mobileNavOpened","className","aria-controls","onClick","xmlns","width","height","fill","stroke","viewBox","d","aria-hidden","strokeLinecap","strokeLinejoin","strokeWidth","MobileNavbar","activeUser","to","activeClassName","Navbar","PostDetails","history","useHistory","content","push","PostPreview","length","slice","concat","Post","compact","useState","full","setFull","label","setLabel","title","StyleButton","text","PostForm","setTitle","setContent","onSubmit","event","preventDefault","error","htmlFor","value","name","placeholder","onChange","target","cols","rows","SortButton","sorted","setSorted","buttonStyle","handleSortByDate","Content","setCompact","posts","handleCompact","UserList","users","allUsers","dataLoaded","setDataLoaded","useEffect","then","bestPosts","colSpan","mostLikedPost","mostLikedAuthor","mostPostsAuthor","totalLikes","login","credentials","register","formData","LoginForm","setUsername","password","setPassword","formClass","handleLogin","loginService","fetchedUser","setItem","JSON","stringify","errors","err","msg","join","errorsToMsg","RegisterForm","setName","email","setEmail","password1","setPassword1","password2","setPassword2","handleRegister","authService","Notification","notification","UserDetail","defaultProps","singlePostReducer","PostView","comment","setComment","postDetailView","setSinglePostView","crypto","randomBytes","toString","commentWithId","comments","commentPost","com","newComments","deleteComment","App","userMatch","useRouteMatch","postMatch","userDetail","find","params","parsedUser","loggedInUser","getItem","parse","initializeUser","initialPosts","userService","path","postUrl","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.201f9da7.chunk.js","sourcesContent":["const notificationReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n  case 'SET_NOTIFICATION':\r\n    return {\r\n      type: action.data.type,\r\n      message: action.data.message,\r\n    };\r\n  case 'REMOVE_NOTIFICATION':\r\n    return null;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nlet timeOutId;\r\n\r\nexport const flashNotification = (type, message, time = 5) => async (dispatch) => {\r\n  if (timeOutId) {\r\n    console.log('id found');\r\n    clearTimeout(timeOutId);\r\n  }\r\n  dispatch({\r\n    type: 'SET_NOTIFICATION',\r\n    data: {\r\n      type,\r\n      message,\r\n    },\r\n  });\r\n  console.log('dispatched');\r\n  timeOutId = setTimeout(() => {\r\n    dispatch({\r\n      type: 'REMOVE_NOTIFICATION',\r\n    });\r\n    console.log('removed');\r\n  }, time * 1000);\r\n};\r\n\r\nexport default notificationReducer;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/posts';\r\n\r\nlet token = null;\r\n\r\nconst setToken = (newToken) => {\r\n  token = `bearer ${newToken}`;\r\n};\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl);\r\n  return response.data;\r\n};\r\n\r\nconst getBestPosts = async () => {\r\n  const response = await axios.get(`${baseUrl}/all/best`);\r\n  return response.data;\r\n};\r\n\r\nconst getByUsername = async (username) => {\r\n  const response = await axios.get(`${baseUrl}/user/${username}`);\r\n  return response.data;\r\n};\r\n\r\nconst getByUrl = async (url) => {\r\n  const response = await axios.get(`${baseUrl}/url/${url}`);\r\n  return response.data;\r\n};\r\n\r\nconst create = async (newPost) => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  };\r\n  const response = await axios.post(baseUrl, newPost, config);\r\n  console.log('what we get from server:', response.data);\r\n  console.log('Author', response.data.author);\r\n  return response.data;\r\n};\r\n\r\nconst updateOne = async (id, newPost) => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  };\r\n  const response = await axios.put(`${baseUrl}/${id}`, newPost, config);\r\n  return response.data;\r\n};\r\n\r\nconst deleteOne = async (id) => {\r\n  const config = {\r\n    headers: { Authorization: token },\r\n  };\r\n  const response = await axios.delete(`${baseUrl}/${id}`, config);\r\n  console.log(`Sending req to delete post ${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  getByUsername,\r\n  getByUrl,\r\n  getBestPosts,\r\n  create,\r\n  setToken,\r\n  deleteOne,\r\n  updateOne,\r\n};\r\n","import postService from '../services/posts';\r\n\r\nconst userReducer = (state = null, action) => {\r\n  switch (action.type) {\r\n  case 'INIT_USER':\r\n    return action.data.user;\r\n  case 'LOGIN_USER':\r\n    return action.data.user;\r\n  case 'REMOVE_USER':\r\n    return null;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const loginUser = (user) => ({\r\n  type: 'LOGIN_USER',\r\n  data: {\r\n    user,\r\n  },\r\n});\r\n\r\nexport const logoutUser = () => {\r\n  window.localStorage.removeItem('loggedInBlogappUser');\r\n  postService.setToken(null);\r\n  console.log('logged out');\r\n  return {\r\n    type: 'REMOVE_USER',\r\n  };\r\n};\r\n\r\nexport const initializeUser = () => {\r\n  const loggedInUser = window.localStorage.getItem('loggedInBlogappUser');\r\n  let parsedUser;\r\n  if (loggedInUser) {\r\n    parsedUser = JSON.parse(loggedInUser);\r\n    postService.setToken(parsedUser.token);\r\n    console.log('Found logged in user:', parsedUser);\r\n  }\r\n  return {\r\n    type: 'INIT_USER',\r\n    data: {\r\n      user: parsedUser || null,\r\n    },\r\n  };\r\n};\r\n\r\nexport default userReducer;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/users';\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl);\r\n  return response.data;\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n};\r\n","import userService from '../services/users';\r\n\r\nconst usersReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n  case 'INIT_USERS':\r\n    return action.data;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const initializeUsers = () => async (dispatch) => {\r\n  try {\r\n    const users = await userService.getAll();\r\n    dispatch({\r\n      type: 'INIT_USERS',\r\n      data: users,\r\n    });\r\n  } catch (error) {\r\n    console.log('error fetching all users:', error);\r\n  }\r\n};\r\n\r\nexport default usersReducer;\r\n","/* eslint-disable no-case-declarations */\r\nimport postService from '../services/posts';\r\nimport { flashNotification } from './notificationReducer';\r\n\r\nconst postsReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n  case 'ADD_POST':\r\n    return [action.data, ...state];\r\n  case 'DELETE_POST':\r\n    return state.filter((post) => post.id !== action.data.id);\r\n  case 'SORT_POSTS':\r\n    const sortedPosts = [...state];\r\n    if (action.method === 'likes') {\r\n      sortedPosts.sort((a, b) => b.likes - a.likes);\r\n    } else if (action.method === 'date') {\r\n      sortedPosts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    }\r\n    return sortedPosts;\r\n  case 'UPDATE_POST':\r\n    console.log('setting new state global');\r\n    const { savedPost } = action.data;\r\n    const newState = state.map((p) => (p.id === savedPost.id ? savedPost : p));\r\n    return newState;\r\n  case 'INIT_POSTS':\r\n    return action.data;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const sortPosts = (method) => ({\r\n  type: 'SORT_POSTS',\r\n  method,\r\n});\r\n\r\nexport const likePost = (post) => async (dispatch) => {\r\n  const savedPost = await postService.updateOne(post.id, { ...post, likes: post.likes + 1 });\r\n  console.log(savedPost);\r\n  dispatch({\r\n    type: 'UPDATE_POST',\r\n    data: {\r\n      savedPost,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createPost = (data) => async (dispatch) => {\r\n  try {\r\n    const savedPost = await postService.create(data);\r\n    dispatch(flashNotification('success', `Post \"${savedPost.title}\" successfully created!`, 5));\r\n    return dispatch({\r\n      type: 'ADD_POST',\r\n      data: savedPost,\r\n    });\r\n  } catch (error) {\r\n    console.log('error creating a post:', error.response.data);\r\n    return dispatch(flashNotification('error', 'Error creating a new post!'));\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  await postService.deleteOne(id);\r\n  dispatch({\r\n    type: 'DELETE_POST',\r\n    data: {\r\n      id,\r\n    },\r\n  });\r\n};\r\n\r\nexport const initializePosts = () => async (dispatch) => {\r\n  const initialPosts = await postService.getAll();\r\n  dispatch({\r\n    type: 'INIT_POSTS',\r\n    data: initialPosts,\r\n  });\r\n};\r\n\r\nexport default postsReducer;\r\n","const mobileReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n  case 'SET_OPENED':\r\n    return true;\r\n  case 'SET_CLOSED':\r\n    return false;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const openMobileNavbar = () => ({\r\n  type: 'SET_OPENED',\r\n});\r\n\r\nexport const closeMobileNavbar = () => ({\r\n  type: 'SET_CLOSED',\r\n});\r\n\r\nexport default mobileReducer;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { logoutUser } from '../reducers/userReducer';\r\nimport { openMobileNavbar, closeMobileNavbar } from '../reducers/mobileReducer';\r\n\r\nconst navLink = 'text-white px-2 hover:text-yellow-100 text-m';\r\nconst navLinkMobile = 'text-white hover:text-yellow-600 min-w-full hover:bg-gray-100 hover:opacity-50 block px-3 py-2 rounded-md text-base font-medium';\r\n\r\nconst MenuMobileButton = () => {\r\n  const dispatch = useDispatch();\r\n  const opened = useSelector((state) => state.mobileNavOpened);\r\n  console.log('OPEND:', opened);\r\n  const handleOpened = () => {\r\n    if (opened) {\r\n      return dispatch(closeMobileNavbar());\r\n    }\r\n    return dispatch(openMobileNavbar());\r\n  };\r\n\r\n  return (\r\n    <div className=\"-mr-2 flex justify-end items-end md:hidden\">\r\n      {/* <!-- Mobile menu button --> */}\r\n      <button\r\n        type=\"button\"\r\n        className=\"bg-orange-300 mb-2 inline-flex items-end justify-end p-2 rounded-md text-gray-400 hover:text-white hover:bg-orange-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\"\r\n        aria-controls=\"mobile-menu\"\r\n        onClick={handleOpened}\r\n      >\r\n        {\r\n          opened\r\n            ? (\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" stroke=\"currentColor\" className=\"block h-6 w-6\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\r\n                <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n              </svg>\r\n            ) : (\r\n              <svg className=\"block h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n              </svg>\r\n            )\r\n        }\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MobileNavbar = () => {\r\n  const user = useSelector((state) => state.activeUser);\r\n  const dispatch = useDispatch();\r\n  const opened = useSelector((state) => state.mobileNavOpened);\r\n\r\n  return (\r\n    <div className=\"px-5\">\r\n      <MenuMobileButton />\r\n      <div className=\"flex flex-wrap text-center mx-auto justify-items-center space-y-1\">\r\n        {\r\n          opened\r\n            ? (\r\n              <>\r\n\r\n                <NavLink to=\"/blog\" activeClassName=\"font-bold\" className={navLinkMobile}>Blog</NavLink>\r\n                <NavLink to=\"/users\" activeClassName=\"font-bold\" className={navLinkMobile}>Users</NavLink>\r\n                {/* Conditionally rendering the link to login */}\r\n                {\r\n                  user\r\n                    ? (\r\n                      <div className=\"flex justify-items-end items-end\">\r\n                        <button\r\n                          type=\"button\"\r\n                          onClick={() => dispatch(logoutUser())}\r\n                          className=\" text-right px-3 inline-flex self-end justify-end py-1 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-yellow-400 hover:from-orange-600 to-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n                        >\r\n                          Logout\r\n                        </button>\r\n                      </div>\r\n                    )\r\n                    : (\r\n\r\n                      <NavLink to=\"/login\" activeClassName=\"font-bold\" className={navLinkMobile}>Login</NavLink>\r\n\r\n                    )\r\n                }\r\n\r\n              </>\r\n            )\r\n            : ('')\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Navbar = () => {\r\n  const user = useSelector((state) => state.activeUser);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"bg-gradient-to-r from-pink-500 to-yellow-500 py-4\">\r\n      <div className=\"flex justify-end space-x-4\">\r\n        <div className=\"hidden md:block px-10\">\r\n          <NavLink to=\"/blog\" activeClassName=\"font-bold\" className={navLink}>Blog</NavLink>\r\n          <NavLink to=\"/users\" activeClassName=\"font-bold\" className={navLink}>Users</NavLink>\r\n          {/* Conditionally rendering the link to login */}\r\n          {\r\n            user\r\n              ? (\r\n                <>\r\n                  <span className=\"text-white mr-2\">\r\n                    Hello,\r\n                    {' '}\r\n                    {user.username}\r\n                    !\r\n                  </span>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => dispatch(logoutUser())}\r\n                    className=\"px-3 py-1 mx-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-yellow-400 hover:from-orange-600 to-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n                  >\r\n                    Logout\r\n                  </button>\r\n                </>\r\n              )\r\n              : <NavLink to=\"/login\" activeClassName=\"font-bold\" className=\"px-3 py-1 mx-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-yellow-400 hover:from-orange-600 to-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\">Login</NavLink>\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"md:hidden ml-0\">\r\n        <MobileNavbar />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { deletePost, likePost } from '../reducers/postsReducer';\r\n\r\nconst PostDetails = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state) => state.activeUser);\r\n  const history = useHistory();\r\n  const handleDelete = () => {\r\n    dispatch(deletePost(post.id));\r\n    return history.push('/blog');\r\n  };\r\n  if (!post) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <p className=\"text-justify px-5 py-2\">{post.content ? post.content : ''}</p>\r\n      <p className=\"text-justify pl-5\">\r\n        likes:\r\n        {' '}\r\n        <strong>{post.likes}</strong>\r\n        {' '}\r\n        author:\r\n        {' '}\r\n        <strong>{post.author ? post.author.username : 'deleted'}</strong>\r\n        {' '}\r\n      </p>\r\n      {user\r\n        ? (\r\n          <div className=\"flex px-3 justify-between\">\r\n            <button\r\n              id=\"likeButton\"\r\n              type=\"button\"\r\n              onClick={() => dispatch(likePost(post))}\r\n              className=\"py-1 px-3 mx-2 mt-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-pink-400 hover:from-pink-600 to-yellow-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n            >\r\n              Like\r\n            </button>\r\n            {user.username === post.author.username ? (\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleDelete}\r\n                className=\"py-1 px-3 mx-2 mt-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-orange-400 hover:from-orange-600 to-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n              >\r\n                Delete\r\n              </button>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        ) : ''}\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nPostDetails.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    content: PropTypes.string,\r\n    likes: PropTypes.number.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    author: PropTypes.shape({\r\n      username: PropTypes.string.isRequired,\r\n      name: PropTypes.string,\r\n      id: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostDetails;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { deletePost, likePost } from '../reducers/postsReducer';\r\n\r\nconst PostPreview = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state) => state.activeUser);\r\n  const history = useHistory();\r\n  const handleDelete = () => {\r\n    dispatch(deletePost(post.id));\r\n    return history.push('/blog');\r\n  };\r\n  if (!post) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <p className=\"text-justify px-5 py-2\">{post.content.length > 160 ? post.content.slice(0, 160).concat('...') : post.content}</p>\r\n      <p className=\"text-justify pl-5\">\r\n        likes:\r\n        {' '}\r\n        <strong>{post.likes}</strong>\r\n        {' '}\r\n        author:\r\n        {' '}\r\n        <strong>{post.author ? post.author.username : 'deleted'}</strong>\r\n        {' '}\r\n      </p>\r\n      {user\r\n        ? (\r\n          <div className=\"flex px-3 justify-between\">\r\n            <button\r\n              id=\"likeButton\"\r\n              type=\"button\"\r\n              onClick={() => dispatch(likePost(post))}\r\n              className=\"py-1 px-3 mx-2 mt-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-pink-400 hover:from-pink-600 to-yellow-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n            >\r\n              Like\r\n            </button>\r\n            {user.username === post.author.username ? (\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleDelete}\r\n                className=\"py-1 px-3 mx-2 mt-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-orange-400 hover:from-orange-600 to-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n              >\r\n                Delete\r\n              </button>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        ) : ''}\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nPostPreview.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    content: PropTypes.string,\r\n    likes: PropTypes.number.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    author: PropTypes.shape({\r\n      username: PropTypes.string.isRequired,\r\n      name: PropTypes.string,\r\n      id: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostPreview;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport PostDetails from './PostDetails';\r\nimport PostPreview from './PostPreview';\r\n\r\nconst Post = ({ post, compact }) => {\r\n  const [full, setFull] = useState(false);\r\n  const [label, setLabel] = useState('view');\r\n  if (!post) {\r\n    return null;\r\n  }\r\n\r\n  // Opening and closing post preview\r\n  const handleFull = () => {\r\n    setFull(!full);\r\n    if (label === 'view') {\r\n      setLabel('hide');\r\n    } else {\r\n      setLabel('view');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"py-3 px-2 mx-2 my-2 border shadow rounded hover:bg-gray-100\">\r\n      {compact ? (\r\n        <>\r\n          <h3>\r\n            <Link to={`/blog/${post.url}`} className=\"font-bold text-xl px-5 text-gray-500 hover:text-gray-700\">\r\n              {post.title}\r\n            </Link>\r\n            {\r\n              post.content.length > 160\r\n                ? (\r\n                  <button className=\"ml-3 px-2 focus:outline-none shadow-sm rounded-sm bg-gray-100 hover:bg-gray-500 hover:text-white\" type=\"button\" onClick={handleFull}>\r\n                    {label}\r\n                  </button>\r\n                ) : null\r\n            }\r\n          </h3>\r\n          {full ? <PostDetails post={post} /> : <PostPreview post={post} />}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Link to={`/blog/${post.url}`} className=\"font-bold text-xl px-5 text-gray-500 hover:text-gray-700\">{post.title}</Link>\r\n          <PostDetails post={post} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    content: PropTypes.string,\r\n    likes: PropTypes.number.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    author: PropTypes.shape({\r\n      username: PropTypes.string.isRequired,\r\n      name: PropTypes.string,\r\n      id: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  compact: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Post;\r\n","/* eslint-disable react/button-has-type */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StyleButton = ({ type, text, id }) => (\r\n  <button\r\n    type={type}\r\n    id={id}\r\n    className=\"inline-flex mt-4 py-2 px-4 shadow text-sm font-medium rounded-md text-white bg-gradient-to-r from-yellow-400 hover:from-pink-500 to-orange-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n  >\r\n    {text}\r\n  </button>\r\n);\r\n\r\nStyleButton.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default StyleButton;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { flashNotification } from '../reducers/notificationReducer';\r\nimport { createPost } from '../reducers/postsReducer';\r\nimport StyleButton from './StyleButton';\r\n\r\nconst PostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  // Creating a new post\r\n  const handlePostCreation = (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      dispatch(createPost({ title, content }));\r\n      setTitle('');\r\n      return setContent('');\r\n    } catch (error) {\r\n      return dispatch(flashNotification('error', error.response.data.error, 5));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handlePostCreation}>\r\n      <div>\r\n        <label htmlFor=\"title\">\r\n          <span className=\"block text-m font-medium\">Title</span>\r\n          <input\r\n            id=\"title\"\r\n            type=\"text\"\r\n            value={title}\r\n            name=\"title\"\r\n            placeholder=\"Title\"\r\n            className=\"focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md shadow-sm sm:text-sm border-gray-300\"\r\n            onChange={({ target }) => setTitle(target.value)}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"content\">\r\n          <span className=\"block text-m font-medium\">Content</span>\r\n          <textarea\r\n            id=\"content\"\r\n            type=\"text\"\r\n            value={content}\r\n            name=\"content\"\r\n            cols=\"30\"\r\n            rows=\"10\"\r\n            placeholder=\"Write here what you want to say...\"\r\n            className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 mt-1 block w-full sm:text-sm border-gray-300 rounded-md\"\r\n            onChange={({ target }) => setContent(target.value)}\r\n          />\r\n        </label>\r\n      </div>\r\n      <StyleButton\r\n        id=\"postSubmit\"\r\n        type=\"submit\"\r\n        text=\"Create\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { sortPosts } from '../reducers/postsReducer';\r\n\r\nconst SortButton = () => {\r\n  const [sorted, setSorted] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const buttonStyle = 'mt-4 my-3 py-2 px-4 shadow text-sm font-medium rounded-md text-white bg-gradient-to-r from-yellow-400 hover:from-pink-500 to-orange-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500';\r\n\r\n  const handleSortByLikes = () => {\r\n    dispatch(sortPosts('likes'));\r\n    return setSorted(true);\r\n  };\r\n\r\n  const handleSortByDate = async () => {\r\n    dispatch(sortPosts('date'));\r\n    return setSorted(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {sorted\r\n        ? (\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleSortByDate}\r\n            className={buttonStyle}\r\n          >\r\n            sort by date\r\n          </button>\r\n        )\r\n        : (\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleSortByLikes}\r\n            className={buttonStyle}\r\n          >\r\n            sort by likes\r\n          </button>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortButton;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Post from './Post';\r\nimport PostForm from './PostForm';\r\nimport SortButton from './SortButton';\r\n\r\nconst Content = () => {\r\n  const [compact, setCompact] = useState(true);\r\n  const posts = useSelector((state) => state.posts);\r\n  const user = useSelector((state) => state.activeUser);\r\n  const buttonStyle = 'mt-4 my-3 py-2 px-4 shadow text-sm font-medium rounded-md text-white bg-gradient-to-r from-yellow-400 hover:from-pink-500 to-orange-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500';\r\n  if (!posts) {\r\n    return (\r\n      <div>\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Handling the compact view button\r\n  const handleCompact = () => {\r\n    setCompact(!compact);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-gray-700 grid md:grid-cols-2 md:gap-5 md:px-8 mt-5\">\r\n      <div className=\"md:col-span-1 md:col-start-1\">\r\n        <h1 className=\"font-bold text-3xl antialiased\">Blog</h1>\r\n        {/* if user is logged in, shows Form,\r\n        otherwise - suggests to login */}\r\n        {user\r\n          ? (\r\n            <>\r\n              <h2>Create new post</h2>\r\n              <PostForm\r\n                posts={posts}\r\n              />\r\n            </>\r\n          )\r\n          : 'Login to create new posts!' }\r\n      </div>\r\n      <div className=\"md:col-span-1 md:col-start-2\">\r\n        <div className=\"flex justify-end space-x-4 mr-2\">\r\n          {/* Button for switching compact view */}\r\n          {compact ? (\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCompact}\r\n              className={buttonStyle}\r\n            >\r\n              Full view\r\n            </button>\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleCompact}\r\n              className={buttonStyle}\r\n            >\r\n              Compact\r\n            </button>\r\n          )}\r\n          {/* Sorting the posts by likes or date */}\r\n          <SortButton />\r\n        </div>\r\n        {posts.map((post) => (\r\n          <Post\r\n            key={post.id}\r\n            post={post}\r\n            compact={compact}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport postService from '../services/posts';\r\n\r\nconst UserList = () => {\r\n  const users = useSelector((state) => state.allUsers);\r\n  const [dataLoaded, setDataLoaded] = useState(null);\r\n  useEffect(() => {\r\n    postService.getBestPosts()\r\n      .then((bestPosts) => {\r\n        console.log(bestPosts);\r\n        setDataLoaded(bestPosts);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"text-center font-bold text-2xl my-3\">\r\n        Users in blog\r\n      </h2>\r\n      <div className=\"md:grid md:grid-cols-5\">\r\n        <div className=\"shadow rounded border md:col-start-2 md:col-span-3\">\r\n          <table className=\"divide-y min-w-full\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"p-3\">Users</th>\r\n                <th className=\"p-3\">Posts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"divide-y bg-gray-100 rounded\">\r\n              {users.map((user) => (\r\n                <tr className=\"divide-y hover:bg-white\" key={user.id}>\r\n                  <td className=\"text-center\"><Link to={`/users/${user.username}`} className=\"hover:text-gray-500\">{user.username}</Link></td>\r\n                  <td className=\"text-center\">{user.posts.length}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      <h2 className=\"text-center font-bold text-2xl my-3\">\r\n        Data about posts and users\r\n      </h2>\r\n      {\r\n        dataLoaded\r\n          ? (\r\n            <div className=\"md:grid md:grid-cols-5\">\r\n              <div className=\"shadow rounded border md:col-start-2 md:col-span-3 mb-5\">\r\n                <table className=\"divide-y min-w-full\">\r\n                  <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                      <th className=\"p-3\" colSpan=\"2\">Best posts and users</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"divide-y bg-gray-100 rounded\">\r\n                    <tr>\r\n                      <td className=\"text-center font-semibold\" colSpan=\"2\">\r\n                        Most liked\r\n                        {' '}\r\n                        <strong>post</strong>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"divide-y hover:bg-white\">\r\n                      <td className=\"text-center\">\r\n                        <Link to={`/blog/${dataLoaded.mostLikedPost.url}`} className=\"hover:text-gray-500\">\r\n                          {dataLoaded.mostLikedPost.title}\r\n                          , likes:\r\n                          {' '}\r\n                          {dataLoaded.mostLikedPost.likes}\r\n                        </Link>\r\n                      </td>\r\n                      <td className=\"text-center\">\r\n                        author:\r\n                        {' '}\r\n                        {dataLoaded.mostLikedPost.author.username}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td className=\"text-center font-semibold\" colSpan=\"2\">\r\n                        Most liked\r\n                        {' '}\r\n                        <strong>author</strong>\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"divide-y hover:bg-white\">\r\n                      <td className=\"text-center\">\r\n                        {dataLoaded.mostLikedAuthor.username}\r\n                      </td>\r\n                      <td className=\"text-center\">\r\n                        Likes:\r\n                        {' '}\r\n                        {dataLoaded.mostLikedAuthor.likes}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td className=\"text-center font-semibold\" colSpan=\"2\">\r\n                        Author with most posts\r\n                      </td>\r\n                    </tr>\r\n                    <tr className=\"divide-y hover:bg-white\">\r\n                      <td className=\"text-center\">\r\n                        {dataLoaded.mostPostsAuthor.username}\r\n                      </td>\r\n                      <td className=\"text-center\">\r\n                        Posts:\r\n                        {' '}\r\n                        {dataLoaded.mostPostsAuthor.posts}\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td className=\"text-center font-semibold\" colSpan=\"2\">\r\n                        Total likes from posts -\r\n                        {' '}\r\n                        {dataLoaded.totalLikes}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )\r\n          : <div className=\"text-center\">Loading...</div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/login';\r\n\r\nconst login = async (credentials) => {\r\n  const response = await axios.post(baseUrl, credentials);\r\n  return response.data;\r\n};\r\n\r\nconst register = async (formData) => {\r\n  const response = await axios.post('/api/users', formData);\r\n  return response.data;\r\n};\r\n\r\nexport default { login, register };\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { loginUser } from '../reducers/userReducer';\r\nimport StyleButton from './StyleButton';\r\nimport postService from '../services/posts';\r\nimport loginService from '../services/login';\r\nimport { flashNotification } from '../reducers/notificationReducer';\r\n\r\nconst LoginForm = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const formClass = 'focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md shadow-sm sm:text-sm border-gray-300 md:max-w-md';\r\n  // Sending the request to login endpoint and setting hook, localstorage and token\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const fetchedUser = await loginService.login({ username, password });\r\n      postService.setToken(fetchedUser.token);\r\n      window.localStorage.setItem('loggedInBlogappUser', JSON.stringify(fetchedUser));\r\n      console.log('Logged in as:', fetchedUser);\r\n      dispatch(loginUser(fetchedUser));\r\n      return history.push('/blog');\r\n    } catch (error) {\r\n      console.log();\r\n      let { errors } = error.response.data;\r\n      if (errors) {\r\n        errors = errors.map((err) => err.msg).join(', ');\r\n      }\r\n      const err = error.response.data.error;\r\n      const errorsToMsg = errors || err;\r\n      return dispatch(flashNotification('error', errorsToMsg));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-bold text-2xl my-3\">\r\n        Login now\r\n      </h2>\r\n      <form onSubmit={handleLogin}>\r\n        <div>\r\n          <label htmlFor=\"loginUsername\">\r\n            Username\r\n            <input\r\n              type=\"text\"\r\n              id=\"loginUsername\"\r\n              value={username}\r\n              name=\"username\"\r\n              className={formClass}\r\n              onChange={({ target }) => setUsername(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"loginPassword\">\r\n            Password\r\n            <input\r\n              id=\"loginPassword\"\r\n              type=\"password\"\r\n              value={password}\r\n              name=\"password\"\r\n              className={formClass}\r\n              onChange={({ target }) => setPassword(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <StyleButton type=\"submit\" text=\"Login\" id=\"loginButton\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authService from '../services/login';\r\nimport { flashNotification } from '../reducers/notificationReducer';\r\nimport StyleButton from './StyleButton';\r\n\r\nconst RegisterForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password1, setPassword1] = useState('');\r\n  const [password2, setPassword2] = useState('');\r\n  const dispatch = useDispatch();\r\n  const formClass = 'focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full rounded-md shadow-sm sm:text-sm border-gray-300 md:max-w-md';\r\n\r\n  const handleRegister = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const response = await authService.register({\r\n        name, username, email, password1, password2,\r\n      });\r\n      console.log(response);\r\n      return dispatch(flashNotification('success', 'Registered successfully!', 5));\r\n    } catch (error) {\r\n      console.log(error.response.data);\r\n      const errors = error.response.data.errors.map((err) => err.msg).join(', ');\r\n      return dispatch(flashNotification('error', errors, 15));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-bold text-2xl my-3\">\r\n        Or register\r\n      </h2>\r\n      <form onSubmit={handleRegister}>\r\n        <div>\r\n          <label htmlFor=\"regName\">\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              name=\"name\"\r\n              id=\"regName\"\r\n              className={formClass}\r\n              onChange={({ target }) => setName(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"regUsername\">\r\n            Username\r\n            <input\r\n              type=\"text\"\r\n              value={username}\r\n              name=\"username\"\r\n              id=\"regUsername\"\r\n              className={formClass}\r\n              onChange={({ target }) => setUsername(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"regEmail\">\r\n            Email\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              name=\"email\"\r\n              id=\"regEmail\"\r\n              className={formClass}\r\n              onChange={({ target }) => setEmail(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"regPassword1\">\r\n            Password\r\n            <input\r\n              type=\"password\"\r\n              value={password1}\r\n              name=\"password1\"\r\n              id=\"regPassword1\"\r\n              className={formClass}\r\n              onChange={({ target }) => setPassword1(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"regPassword2\">\r\n            Confirm password\r\n            <input\r\n              type=\"password\"\r\n              value={password2}\r\n              name=\"password2\"\r\n              id=\"regPassword2\"\r\n              className={formClass}\r\n              onChange={({ target }) => setPassword2(target.value)}\r\n            />\r\n          </label>\r\n        </div>\r\n        <StyleButton text=\"Sign Up\" type=\"submit\" id=\"signUpButton\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Notification = () => {\r\n  const notification = useSelector((state) => state.notification);\r\n  // Rendering notification only when there are any\r\n  if (notification) {\r\n    return (\r\n      <div className={notification.type === 'success'\r\n        ? 'bg-green-500 p-5 font-semibold rounded shadow m-3 text-white'\r\n        : 'bg-red-400 p-5 font-semibold rounded shadow m-3 text-white'}\r\n      >\r\n        {notification.message}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport Post from './Post';\r\n// import postService from '../services/posts';\r\n\r\nconst UserDetail = ({ user }) => {\r\n  console.log('rendering component');\r\n  const posts = useSelector((state) => state.posts\r\n    .filter((post) => post.author.username === user.username));\r\n  if (!user) {\r\n    return null;\r\n  }\r\n  // let posts;\r\n  // useEffect(() => {\r\n  //   postService.getByUsername(user.username)\r\n  //     .then((fPosts) => {\r\n  //       posts = fPosts;\r\n  //     });\r\n  // });\r\n  return (\r\n    <div>\r\n      <h2 className=\"font-bold px-3 text-2xl my-2\">\r\n        {user.username}\r\n      </h2>\r\n      <h3>\r\n        <span className=\"font-semibold px-3 text-xl\">List of all posts:</span>\r\n        {posts.map((post) => <Post key={post.id} post={post} compact={false} />)}\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nUserDetail.defaultProps = {\r\n  user: {} || null,\r\n};\r\n\r\nUserDetail.propTypes = {\r\n  user: PropTypes.shape({\r\n    posts: PropTypes.arrayOf(PropTypes.object),\r\n    username: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default UserDetail;\r\n","import crypto from 'crypto';\r\nimport postService from '../services/posts';\r\n\r\nconst singlePostReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n  case 'SET_POST_VIEW':\r\n    return action.data;\r\n  case 'UPDATE_POST':\r\n    console.log('setting new state individual post');\r\n    return action.data.savedPost;\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const setSinglePostView = (url) => async (dispatch) => {\r\n  const post = await postService.getByUrl(url);\r\n  dispatch({\r\n    type: 'SET_POST_VIEW',\r\n    data: post,\r\n  });\r\n};\r\n\r\nexport const commentPost = (post, comment) => async (dispatch) => {\r\n  const id = crypto.randomBytes(12).toString('hex');\r\n  const commentWithId = { ...comment, id };\r\n  const savedPost = await postService\r\n    .updateOne(post.id, { ...post, comments: [commentWithId, ...post.comments] });\r\n  console.log(savedPost);\r\n  dispatch({\r\n    type: 'UPDATE_POST',\r\n    data: {\r\n      savedPost,\r\n    },\r\n  });\r\n};\r\n\r\nexport const deleteComment = (post, comment) => async (dispatch) => {\r\n  const newComments = post.comments.filter((com) => com !== comment);\r\n  const savedPost = await postService\r\n    .updateOne(post.id, { ...post, comments: newComments });\r\n  dispatch({\r\n    type: 'UPDATE_POST',\r\n    data: {\r\n      savedPost,\r\n    },\r\n  });\r\n};\r\n\r\nexport default singlePostReducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setSinglePostView, commentPost, deleteComment } from '../reducers/singlePostReducer';\r\nimport PostDetails from './PostDetails';\r\nimport StyleButton from './StyleButton';\r\n\r\nconst PostView = ({ url }) => {\r\n  const [comment, setComment] = useState('');\r\n  const dispatch = useDispatch();\r\n  const post = useSelector((state) => state.postDetailView);\r\n  const user = useSelector((state) => state.activeUser);\r\n  const formClass = 'focus:ring-indigo-500 col-span-3 col-start-2 focus:border-indigo-500 flex-1 block w-full rounded-md shadow-sm sm:text-sm border-gray-300';\r\n\r\n  const handleCreateComment = (event) => {\r\n    event.preventDefault();\r\n    dispatch(commentPost(post, { author: user.username, content: comment }));\r\n    setComment('');\r\n  };\r\n  useEffect(() => {\r\n    dispatch(setSinglePostView(url));\r\n  }, [url]);\r\n\r\n  if (!post || post.url !== url) {\r\n    return <h4>Loading...</h4>;\r\n  }\r\n  return (\r\n    <div className=\"md:grid grid-cols-5\">\r\n      <div className=\"col-start-2 col-span-3 border rounded shadow-sm text-center mt-5\">\r\n        <h2 className=\"text-3xl mt-3 md:text-4xl font-bold\">{post.title}</h2>\r\n        <PostDetails post={post} />\r\n        <form onSubmit={handleCreateComment}>\r\n          <label htmlFor=\"comment\">\r\n            <span className=\"font-semibold\">Add a comment:</span>\r\n            <div className=\"grid grid-cols-5\">\r\n              <textarea\r\n                value={comment}\r\n                onChange={({ target }) => setComment(target.value)}\r\n                type=\"text\"\r\n                id=\"comment\"\r\n                name=\"comment\"\r\n                className={formClass}\r\n              />\r\n            </div>\r\n          </label>\r\n          <StyleButton type=\"submit\" text=\"Post\" id=\"commentSubmit\" />\r\n        </form>\r\n        <h4 className=\"text-left ml-5 font-semibold\">\r\n          Comments(\r\n          {post.comments.length}\r\n          ):\r\n        </h4>\r\n        <ul className=\"text-left ml-5 pb-3\">\r\n          {post.comments.map((com) => (\r\n            <div key={com.id}>\r\n              <li>{com.content}</li>\r\n              <ul>\r\n                <li>\r\n                  by\r\n                  {' '}\r\n                  <strong>{com.author}</strong>\r\n                  {user.username === com.author\r\n                    ? (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => dispatch(deleteComment(post, com))}\r\n                        className=\"py-1 px-3 mx-2 mt-2 shadow-sm text-sm font-medium rounded-md text-white bg-gradient-to-r from-orange-400 hover:from-orange-600 to-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    )\r\n                    : null }\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPostView.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostView;\r\n","/* eslint-disable import/no-named-as-default-member */\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  Switch, Route, useRouteMatch, Redirect,\r\n} from 'react-router-dom';\r\nimport { initializeUser } from './reducers/userReducer';\r\nimport { initializeUsers } from './reducers/usersReducer';\r\nimport { initializePosts } from './reducers/postsReducer';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Content from './components/Content';\r\nimport UserList from './components/UserList';\r\nimport LoginForm from './components/LoginForm';\r\nimport RegisterForm from './components/RegisterForm';\r\nimport Notification from './components/Notification';\r\nimport UserDetail from './components/UserDetail';\r\nimport PostView from './components/PostView';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const users = useSelector((state) => state.allUsers);\r\n  const userMatch = useRouteMatch('/users/:username');\r\n  const postMatch = useRouteMatch('/blog/:postUrl');\r\n  const userDetail = userMatch\r\n    ? users.find((user) => user.username === userMatch.params.username)\r\n    : null;\r\n\r\n  // Get the logged in user if any\r\n  useEffect(() => {\r\n    dispatch(initializeUser());\r\n  }, []);\r\n\r\n  // On page load fetching all posts from the database\r\n  useEffect(() => {\r\n    dispatch(initializePosts());\r\n  }, []);\r\n\r\n  // And fetching all users from the database\r\n  useEffect(() => {\r\n    dispatch(initializeUsers());\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"px-4\">\r\n        <Notification />\r\n        <Switch>\r\n          <Route path=\"/blog/:url\">\r\n            {console.log('postMatch:', postMatch)}\r\n            {\r\n              postMatch\r\n                ? <PostView url={postMatch.params.postUrl} />\r\n                : null\r\n            }\r\n          </Route>\r\n          <Route path=\"/blog\">\r\n            <Content />\r\n          </Route>\r\n          <Route path=\"/users/:username\">\r\n            <UserDetail user={userDetail} />\r\n          </Route>\r\n          <Route path=\"/users\">\r\n            <UserList />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <div className=\"grid md:grid-cols-2 md:gap-5 md:px-12\">\r\n              <LoginForm />\r\n              <RegisterForm />\r\n            </div>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Redirect to=\"/blog\" />\r\n          </Route>\r\n          <Route path=\"*\">\r\n            <h2 className=\"font-semibold text-2xl\">\r\n              Page not found.\r\n            </h2>\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport notificationReducer from './reducers/notificationReducer';\r\nimport postsReducer from './reducers/postsReducer';\r\nimport userReducer from './reducers/userReducer';\r\nimport usersReducer from './reducers/usersReducer';\r\nimport singlePostReducer from './reducers/singlePostReducer';\r\nimport mobileReducer from './reducers/mobileReducer';\r\n\r\nconst reducer = combineReducers({\r\n  notification: notificationReducer,\r\n  posts: postsReducer,\r\n  activeUser: userReducer,\r\n  allUsers: usersReducer,\r\n  postDetailView: singlePostReducer,\r\n  mobileNavOpened: mobileReducer,\r\n});\r\n\r\nconst store = createStore(reducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  // eslint-disable-next-line no-undef\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}